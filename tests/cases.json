[
  {
    "cases": [
      {
        "run": "echo dagan | nato",
        "stdout": "Delta Alfa Golf Alfa November\n"
      },
      {
        "run": "nato da gan",
        "stdout": "Delta Alfa Space Golf Alfa November\n"
      },
      {
        "run": "echo {0..1000} | nato",
        "max_time": 1
      }
    ]
  },
  {
    "files": {
      "good_file": "Hello world!\n",
      "no_newline": "Hello world!",
      "space_at_end": "Hello world! \n",
      "too_many_newlines": "Hello world!\n\n",
      "many_spaces_at_end": "Hello world!      \n",
      "skipped_file": "\u0001\u0002\u0003\u0004\u0005"
    },
    "cases": [
      {
        "run": "wslint good_file"
      },
      {
        "run": "wslint no_newline",
        "exit": 1
      },
      {
        "run": "wslint space_at_end",
        "exit": 1
      },
      {
        "run": "wslint too_many_newlines",
        "exit": 1
      },
      {
        "description": "Make sure we don't error on encountering a binary file",
        "run": "wslint good_file skipped_file"
      },
      {
        "description": "Make sure -s option works",
        "run": "wslint -s good_file skipped_file",
        "stderr": "",
        "stdout": ""
      },
      {
        "run": "wslint -f * || wslint *"
      }
    ]
  },
  {
    "files": {
      "zero": "",
      "one": "a",
      "six": "hello\n"
    },
    "cases": [
      {
        "run": "fsize zero",
        "stdout": "0\n"
      },
      {
        "run": "fsize one",
        "stdout": "1\n"
      },
      {
        "run": "fsize six",
        "stdout": "6\n"
      },
      {
        "run": "fsize -f six",
        "stdout": "6\n"
      },
      {
        "run": "fsize -n six",
        "stdout": "6 six\n"
      },
      {
        "run": "fsize this-file-dont-exist",
        "exit": "1\n"
      }
    ]
  },
  {
    "run": "echo -e \"\\x1b[31mHello World\\x1b[0m\" | colorstrip",
    "stdout": "Hello World\n"
  },
  {
    "run": "echo hello world | titlecase",
    "stdout": "Hello World\n"
  },
  {
    "cases": [
      {
        "run": "peval 1+1",
        "stdout": "2\n"
      },
      {
        "run": "peval -x 1+1",
        "stdout": "0x2\n"
      },
      {
        "run": "peval 0/0",
        "exit": 1
      },
      {
        "run": "peval -n 5",
        "stdout": "5"
      },
      {
        "run": "peval -nx 5",
        "stdout": "0x5"
      },
      {
        "run": "echo 2+2 | peval -n",
        "stdout": "4"
      },
      {
        "run": "echo -e '2\n1+4' | peval",
        "stdout": "2\n5\n"
      }
    ]
  },
  {
    "run": "dec2hex 32",
    "stdout": "0x20\n"
  },
  {
    "run": "hex2dec 20",
    "stdout": "32\n"
  },
  {
    "run": "argcount",
    "stdout": "0\n"
  },
  {
    "run": "argcount hi",
    "stdout": "1\n"
  },
  {
    "run": "argcount hi there",
    "stdout": "2\n"
  },
  {
    "files": {
      "file1": "bulbasaur",
      "file2": "koffing"
    },
    "cases": [
      {
        "run": "fswap file1 file2"
      },
      {
        "run": "cat file1",
        "stdout": "koffing"
      },
      {
        "run": "cat file2",
        "stdout": "bulbasaur"
      }
    ]
  },
  {
    "files": {
      "file1": "hello world",
      "file2": "hello"
    },
    "cases": [
      {
        "run": "fhas file1 file2"
      },
      {
        "run": "fhas file1 file1"
      },
      {
        "run": "fhas file2 file1",
        "exit": "1"
      }
    ]
  },
  {
    "cases": [
      {
        "run": "kvs -d test --help"
      },
      {
        "run": "kvs -d test store foo bar"
      },
      {
        "run": "kvs -d test list",
        "stdout": "foo bar\n"
      },
      {
        "run": "kvs -d test get -n foo",
        "stdout": "bar"
      },
      {
        "run": "kvs -d test rm foo"
      },
      {
        "run": "kvs -d test get foo",
        "exit": 1
      },
      {
        "description": "Create config in nonextant directory",
        "run": "kvs -d a/b/c/d/e/f/test store foo bar && rm -r a"
      }
    ]
  },
  {
    "cases": [
      {
        "run": "countdown 0",
        "max_time": 0.500
      },
      {
        "run": "countdown -d 0",
        "stdout": "0\n"
      },
      {
        "run": "countdown -d 0s",
        "stdout": "0\n"
      },
      {
        "run": "countdown -d 0m",
        "stdout": "0\n"
      },
      {
        "run": "countdown -d 1",
        "stdout": "1\n"
      },
      {
        "run": "countdown -d 1s",
        "stdout": "1\n"
      },
      {
        "run": "countdown -d 1m",
        "stdout": "60\n"
      },
      {
        "run": "countdown -d 1m30s",
        "stdout": "90\n"
      },
      {
        "run": "countdown -d 1m 30s",
        "stdout": "90\n"
      }
    ]
  },
  {
    "run": "untilfail false"
  },
  {
    "cases": [
        {
            "run": "echo 'Hello' | words",
            "stdout": "Hello\n"
        },
        {
            "run": "echo 'Hello' | words -d 'l'",
            "stdout": "He\no\n"
        },
        {
            "run": "echo 'Hello there|friend' | words",
            "stdout": "Hello\nthere\nfriend\n"
        },
        {
            "run": "echo 'foo 3bar' | words",
            "stdout": "foo\n3bar\n"
        },
        {
            "run": "echo 'foo 3bar' | words -i",
            "stdout": "foo\n"
        },
        {
            "run": "echo 'foo 3bar' | words -u",
            "stdout": ""
        },
        {
            "run": "echo 'foo 3BAR' | words -u",
            "stdout": "3BAR\n"
        },
        {
            "run": "echo 'foo 3BAR' | words -iu",
            "stdout": ""
        }
    ]
  }
]
