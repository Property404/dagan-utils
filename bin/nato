#!/usr/bin/env python3
"""
Translate text to NATO phonetic alphabet
<https://en.wikipedia.org/wiki/NATO_phonetic_alphabet>

The primary purpose of the script is to communicate spelling of names, emails,
etc over the phone.
"""


import sys
import argparse

CODEBOOK = {
    "A": "ALFA",
    "B": "BRAVO",
    "C": "CHARLIE",
    "D": "DELTA",
    "E": "ECHO",
    "F": "FOXTROT",
    "G": "GOLF",
    "H": "HOTEL",
    "I": "INDIA",
    "J": "JULIETT",
    "K": "KILO",
    "L": "LIMA",
    "M": "MIKE",
    "N": "NOVEMBER",
    "O": "OSCAR",
    "P": "PAPA",
    "Q": "QUEBEC",
    "R": "ROMEO",
    "S": "SIERRA",
    "T": "TANGO",
    "U": "UNIFORM",
    "V": "VICTOR",
    "W": "WHISKEY",
    "X": "XRAY",
    "Y": "YANKEE",
    "Z": "ZULU",
}
WHITESPACE_BOOK = {
    " ": "SPACE",
    "\t": "TAB",
}
SYMBOL_BOOK = {
    ".": "DOT",
    ",": "COMMA",
    "-": "DASH",
    "_": "UNDERSCORE",
    "*": "STAR",
    "&": "AMPERSAND",
    "$": "DOLLAR_SIGN",
    ":": "COLON",
    ";": "SEMICOLON",
    "'": "SINGLE_QUOTE",
    '"': "DOUBLE_QUOTE",
    "=": "EQUALS_SIGN",
    "#": "POUND",
    "{": "OPENING_CURLY_BRACKET",
    "}": "CLOSING_CURLY_BRACKET",
    "[": "OPENING_SQUARE_BRACKET",
    "]": "CLOSING_SQUARE_BRACKET",
    "<": "LESS_THAN_SIGN",
    ">": "GREATER_THAN_SIGN",
    "+": "PLUS",
    "(": "OPENING_PARENTHESIS",
    ")": "CLOSING_PARENTHESIS",
    "/": "FORWARD_SLASH",
    "\\": "BACKSLASH",
    "^": "CARET",
    "%": "PERCENT",
    "!": "EXCLAMATION_MARK",
    "?": "QUESTION_MARK",
    "~": "TILDE",
    "`": "BACKTICK",
    "@": "@",
}
NUMBER_BOOK = {
    "0": "ZERO",
    "1": "ONE",
    "2": "TWO",
    "3": "THREE",
    "4": "FOUR",
    "5": "FIVE",
    "6": "SIX",
    "7": "SEVEN",
    "8": "EIGHT",
    "9": "NINE",
}


COLOR_LETTER = "\033[92m"
COLOR_NUMBER = "\033[94m"
COLOR_SYMBOL = "\033[0m"
COLOR_RAW = "\033[0m"
RESET = "\033[0m"


def write_with_color(color, text, options):
    """Write text with specified color if not piped"""

    use_color = sys.stdout.isatty()
    if options["color"] == "always":
        use_color = True
    elif options["color"] == "never":
        use_color = False

    if use_color:
        sys.stdout.write(color)
    sys.stdout.write(text)
    if use_color:
        sys.stdout.write(RESET)


def convert(string, options):
    """Convert `string` to nato phonetic alphabet"""
    first = True
    for char in string:
        char = char.upper()
        if first:
            first = False
        elif char != "\n":
            sys.stdout.write(" ")
        if char in CODEBOOK:
            write_with_color(COLOR_LETTER, CODEBOOK[char].title(), options)
        elif char in NUMBER_BOOK:
            write_with_color(COLOR_NUMBER, NUMBER_BOOK[char].title(), options)
        elif char in WHITESPACE_BOOK:
            write_with_color(COLOR_SYMBOL, WHITESPACE_BOOK[char].title(), options)
        elif char in SYMBOL_BOOK:
            write_with_color(
                COLOR_SYMBOL, SYMBOL_BOOK[char].title().replace("_", ""), options
            )
        else:
            write_with_color(COLOR_RAW, char, options)


def main():
    """Main function"""

    parser = argparse.ArgumentParser(
        description="Convert string to NATO phonetic alphabet"
    )
    parser.add_argument(
        "string",
        metavar="S",
        type=str,
        nargs="*",
        default=None,
        help="String to be converted",
    )
    parser.add_argument(
        "-n", "--no-newline", help="Don't add newline", action="store_true"
    )
    parser.add_argument(
        "--color", help="Set color", default="auto", choices=["always", "never", "auto"]
    )

    args = parser.parse_args(sys.argv[1::])

    options = {"color": args.color}
    if len(args.string) == 0:
        for line in sys.stdin:
            convert(line, options)
    else:
        string = " ".join(args.string)
        convert(string, options)
        if not args.no_newline:
            print()


if __name__ == "__main__":
    main()
