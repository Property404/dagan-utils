#!/usr/bin/env python3
"""
Like sleep(1) but with output
"""

import sys
import time
import argparse

# Clears the line before printing
# \r Move the cursor to the beginning
# \x1b[0K is an ANSI code to clear from cursor to end of line
CLEAR = "\r\x1b[0K"


def parse_to_seconds(expr):
    "Parse expression into seconds"
    total = 0
    current = 0
    last_char_was_digit = False
    modifiers = {"s": 1, "m": 60, "h": 3600, "d": 3600 * 24}
    for char in expr:
        if char.isdigit():
            current = current * 10 + int(char)
            last_char_was_digit = True
        elif char in modifiers:
            if not last_char_was_digit:
                print(f"Unexpected modifier: '{char}'", file=sys.stderr)
                sys.exit(1)
            total += current * modifiers[char]
            current = 0
            last_char_was_digit = False
        else:
            # Allow spacing like "1m 1s", but not "1 1"
            if char == " " and not last_char_was_digit:
                continue
            print(f"Invalid time modifier: '{char}'", file=sys.stderr)
            sys.exit(1)
    total += current
    return total


def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Like sleep(1) but with output")
    parser.add_argument("expression", metavar="E", type=str, nargs="+", default=None)
    parser.add_argument(
        "-s", "--seconds", help="Display as seconds only", action="store_true"
    )
    # This just exists for tests
    parser.add_argument("-d", "--dry", help=argparse.SUPPRESS, action="store_true")

    args = parser.parse_args(sys.argv[1::])

    total_seconds = parse_to_seconds(" ".join(args.expression))
    if args.dry:
        print(total_seconds)
        return

    try:
        count = 0
        for count in range(0, total_seconds):
            seconds_left = total_seconds - count
            sys.stdout.write(CLEAR)
            if args.seconds:
                sys.stdout.write(str(seconds_left))
            else:
                (hours_left, seconds_left) = divmod(seconds_left, 3600)
                (minutes_left, seconds_left) = divmod(seconds_left, 60)
                if hours_left > 0:
                    sys.stdout.write(
                        f"{hours_left}:{minutes_left:02}:{seconds_left:02}"
                    )
                elif minutes_left > 0:
                    sys.stdout.write(f"{minutes_left}:{seconds_left:02}")
                elif seconds_left > 0:
                    sys.stdout.write(f"{seconds_left}")
            sys.stdout.flush()
            time.sleep(1)
    except KeyboardInterrupt:
        print(f"{CLEAR}Interrupted")
        return
    print(f"{CLEAR}Done")


if __name__ == "__main__":
    main()
