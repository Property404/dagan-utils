#!/usr/bin/env python3
"""
Utility to output results of a Python expression.
More concise than `python3 -c "print(...)"`
"""
import sys
import argparse

# This allows the user to use functions like log2
# pylint: disable=W0614,W0401,W0622
from math import *


def peval(expr, args):
    """Evaluate and print a Python expression"""

    # pylint: disable=W0123
    try:
        val = eval(expr)
    except (SyntaxError, ZeroDivisionError, NameError) as err:
        print(f"peval: error: {err}", file=sys.stderr)
        sys.exit(1)

    if args.hexadecimal:
        val = hex(int(val))
    elif args.binary:
        val = bin(int(val))
    elif args.octal:
        val = oct(int(val))
    else:
        val = str(val)

    sys.stdout.write(val)


def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="Output results of a python expression"
    )
    parser.add_argument(
        "expression",
        metavar="E",
        type=str,
        nargs="*",
        default=None,
        help="Expression to be evaluated",
    )
    base_options = parser.add_mutually_exclusive_group()
    base_options.add_argument(
        "-x", "--hexadecimal", help="Hexadecimal format", action="store_true"
    )
    base_options.add_argument(
        "-b", "--binary", help="Binary format", action="store_true"
    )
    base_options.add_argument("-o", "--octal", help="Octal format", action="store_true")
    parser.add_argument("-n", "--no-newline", help="No newline", action="store_true")

    args = parser.parse_args(sys.argv[1::])

    if args.expression == []:
        first = True
        for line in sys.stdin:
            # Print newline after every line, except last
            if not first:
                print()
            first = False

            # Then evaluate and print the expression
            peval(line, args)
    else:
        peval("".join(args.expression), args)

    if not args.no_newline:
        print()


if __name__ == "__main__":
    main()
